# {{ ansible_managed }}
#
# inspired by: https://github.com/lefticus/cppbestpractices/blob/master/02-Use_the_Tools_Available.md

# for more info: https://embeddedartistry.com/blog/2017/05/22/werror-is-not-your-friend/
option(${PROJECT_NAME_UPPERCASE}_TREAT_WARNINGS_AS_ERRORS "Treat compiler warnings as errors" OFF)

set(STANDARD_WARNINGS_MSVC
    /W4 # Baseline reasonable warnings
    /w14242 # onversion from 'type1' to 'type1', possible loss of data
    /w14254 # 'operator': conversion from 'type1:field_bits' to 'type2:field_bits', possible loss of data
    /w14263 # 'function': member function does not override any base class virtual member function
    /w14265 # 'classname': class has virtual functions, but destructor is not virtual
    /w14287 # 'operator': unsigned/negative constant mismatch
    /we4289 # nonstandard extension used: 'variable': loop control variable
            # declared in the for-loop is used outside the for-loop scope
    /w14296 # 'operator': expression is always 'boolean_value'
    /w14311 # 'variable': pointer truncation from 'type1' to 'type2'
    /w14545 # expression before comma evaluates to a function missing argument list
    /w14546 # function call before comma missing argument list
    /w14547 # 'operator': operator before comma has no effect
    /w14549 # 'operator': operator before comma has no effect
    /w14555 # expression has no effect; expected expression with side-effect
    /w14619 # pragma warning: there is no warning number 'number'
    /w14640 # enable warning on thread un-safe static member initialization
    /w14826 # conversion from 'type1' to 'type_2' is sign-extended
    /w14905 # wide string literal cast to 'LPSTR'
    /w14906 # string literal cast to 'LPWSTR'
    /w14928 # illegal cop-intialization
)

set(STANDARD_WARNINGS_CLANG
    -Wall
    -Wextra
    -Wshadow
    -Wnon-virtual-dtor
    -Wold-style-cast
    -Wcast-align        # warn for potential performance problem casts
    -Wunused
    -Woverloaded-virtual
    -Wpedantic
    -Wconversion        # warn on type conversions that may lose data
    -Wsign-conversion
    -Wnull-dereference
    -Wdouble-promotion
    -Wformat=2  # warn on security issues around functions that format output
)

set(STANDARD_WARNINGS_GCC
    -Wmisleading-indentation
    -Wduplicated-cond
    -Wduplicated-branches
    -Wlogical-op    # logical operations used where bitwise were probably wanted
    -Wuseless-cast
)

mark_as_advanced(
    STANDARD_WARNINGS_MSVC
    STANDARD_WARNINGS_CLANG
    STANDARD_WARNINGS_GCC
)

set(WARNINGS_MSVC ${STANDARD_WARNINGS_MSVC} CACHE STRING "Warning compiler options to be used with MSVC")
set(WARNINGS_CLANG ${STANDARD_WARNINGS_CLANG} CACHE STRING "Warning compiler options to be used with Clang")
set(WARNINGS_GCC ${STANDARD_WARNINGS_CLANG} ${STANDARD_WARNINGS_GCC} CACHE STRING "Warning compiler options to be used with GNU GCC")


function(add_warnings target)
    # add compiler checks: https://cmake.org/cmake/help/latest/module/CheckCXXSourceCompiles.html#module:CheckCXXSourceCompiles

    target_compile_options(${target}
        PRIVATE
            $<$<AND:$<BOOL:%{${PROJECT_NAME_UPPERCASE}_TREAT_WARNINGS_AS_ERRORS}>,$<CXX_COMPILER_ID:MSVC>>:/WX>
            $<$<AND:$<BOOL:${${PROJECT_NAME_UPPERCASE}_TREAT_WARNINGS_AS_ERRORS}>,$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:AppleClang>,$<CXX_COMPILER_ID:GNU>>>:-Werror>
            $<$<CXX_COMPILER_ID:MSVC>:${WARNINGS_MSVC}>
            $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:AppleClang>>:${WARNINGS_CLANG}>
            $<$<CXX_COMPILER_ID:GNU>:${WARNINGS_GCC}>
    )
endfunction()

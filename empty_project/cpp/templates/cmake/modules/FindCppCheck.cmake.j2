# {{ ansible_managed }}

# Locate cppcheck
#
# This module defines
#  CPPCHECK_EXECUTABLE, where to find cppcheck
#
# To help find the binary you can set CPPCHECK_ROOT_DIR to search a custom path
# Exported argumets include
#   CPPCHECK_FOUND, if false, do not try to link to cppcheck --- if (CPPCHECK_FOUND)
#
#   CPPCHECK_THREADS_ARG - Number of threads to use (e.g. -j 3)
#   CPPCHECK_PROJECT_ARG - The project to use (compile_comands.json)
#   CPPCHECK_BUILD_DIR_ARG - The build output directory
#   CPPCHECK_ERROR_EXITCODE_ARG - The exit code if an error is found
#   CPPCHECK_SUPPRESSIONS - A suppressiosn file to use
#   CPPCHECK_CHECKS_ARGS - The checks to run
#   CPPCHECK_OTHER_ARGS - Any other arguments
#   CPPCHECK_COMMAND - The full command to run the default cppcheck configuration
#
# find the cppcheck binary

option(${PROJECT_NAME_UPPERCASE}_ALLOW_CPPCHECK_UTILITY "Allow CppCheck to run on compiled files" ${${PROJECT_NAME_UPPERCASE}_USE_CODE_QUALITY_TOOLS})

if(${PROJECT_NAME_UPPERCASE}_ALLOW_CPPCHECK_UTILITY)
    # check custom path if present
    if(CPPCHECK_ROOT_DIR)
        find_program(CPPCHECK_EXECUTABLE
            NAMES "cppcheck"
            DOC "cppcheck static analyzer executable"
            PATHS "${CPPCHECK_ROOT_DIR}"
            NO_DEFAULT_PATH)
    else()
        find_program(CPPCHECK_EXECUTABLE
            NAMES "cppcheck"
            DOC "cppcheck static analyzer executable"
        )
    endif()

    if(CPPCHECK_EXECUTABLE)
        execute_process(COMMAND ${CPPCHECK_EXECUTABLE} --version
            OUTPUT_VARIABLE CPPCHECK_VERSION
            ERROR_QUIET
            OUTPUT_STRIP_TRAILING_WHITESPACE
        )

        set(CPPCHECK_THREADS_ARG "-j8" CACHE STRING "The number of threads to use")
        if(EXISTS "${${PROJECT_NAME_UPPERCASE}_BINARY_DIR}/compile_commands.json")
            set(CPPCHECK_BUILD_DIR_ARG "--project=${${PROJECT_NAME_UPPERCASE}_BINARY_DIR}/compile_commands.json" CACHE STRING "The build directory to use")
        else()
            message(STATUS "Found CppCheck: target 'static-analysis-cppcheck' requires CMAKE_EXPORT_COMPILE_COMMANDS=ON")
            set(CPPCHECK_BUILD_DIR_ARG "" CACHE STRING "The build directory to use")
        endif()
        if(EXISTS "${PROJECT_SOURCE_DIR}/.cppcheck_suppressions")
            set(CPPCHECK_SUPPRESSIONS "--suppressions-list=${PROJECT_SOURCE_DIR}/.cppcheck_suppressions" CACHE STRING "The suppressions file to use")
        else()
            set(CPPCHECK_SUPPRESSIONS "" CACHE STRING "The suppressions file to use")
        endif()
        set(CPPCHECK_ERROR_EXITCODE_ARG "--error-exitcode=1" CACHE STRING "The exitcode to use if an error is found")
        set(CPPCHECK_CHECKS_ARGS "" CACHE STRING "Arguments for the checks to run")
        set(CPPCHECK_OTHER_ARGS "--quiet" CACHE STRING "Other arguments")

        set(CPPCHECK_COMMAND
            ${CPPCHECK_EXECUTABLE}
            ${CPPCHECK_THREADS_ARG}
            ${CPPCHECK_PROJECT_ARG}
            ${CPPCHECK_BUILD_DIR_ARG}
            ${CPPCHECK_ERROR_EXITCODE_ARG}
            ${CPPCHECK_SUPPRESSIONS}
            ${CPPCHECK_CHECKS_ARGS}
            ${CPPCHECK_OTHER_ARGS}
        )

        if(EXISTS "${${PROJECT_NAME_UPPERCASE}_BINARY_DIR}/compile_commands.json")
            file(MAKE_DIRECTORY ${${PROJECT_NAME_UPPERCASE}_BINARY_DIR}/analysis/cppcheck)
            add_custom_target(static-analysis-cppcheck
                COMMAND ${CPPCHECK_COMMAND}
            )
        endif()

        set(CMAKE_CXX_CPPCHECK "${CPPCHECK_COMMAND}")
    endif()
endif()

mark_as_advanced(
    CPPCHECK_EXECUTABLE
    CPPCHECK_THREADS_ARG
    CPPCHECK_PROJECT_ARG
    CPPCHECK_BUILD_DIR_ARG
    CPPCHECK_ERROR_EXITCODE_ARG
    CPPCHECK_SUPPRESSIONS
    CPPCHECK_CHECKS_ARGS
    CPPCHECK_OTHER_ARGS
)

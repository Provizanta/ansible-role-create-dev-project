# {{ ansible_managed }}
# generated using: https://github.com/Provizanta/ansible-role-create-dev-project.git

{% set cmake_minimum_version = '3.15' -%}
cmake_minimum_required(VERSION {{ cmake_minimum_version | default('3.13') }} FATAL_ERROR)

# Summarize available features
# https://cmake.org/cmake/help/v3.11/module/FeatureSummary.html
include(FeatureSummary)

# Use link optimization if available
# https://cmake.org/cmake/help/v3.11/module/CheckIPOSupported.html
include(CheckIPOSupported)
check_ipo_supported(RESULT PROPERTY)
if(ipo_supported)
    set_property(GLOBAL PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
endif()

{% if cmake_minimum_version is version('3.12', '<') and cmake_minimum_version is version('3.5', '>') -%}
if(${CMAKE_VERSION} VERSION_LESS {{ CMAKE_VERSION }})
    cmake_policy(VERSION ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION})
endif()
{%- endif %}

file(READ "${CMAKE_CURRENT_SOURCE_DIR}/VERSION" READ_VERSION)
string(REGEX MATCH "([0-9]*).([0-9]*).([0-9]*)" _ ${READ_VERSION})
set(project_VERSION_MAJOR ${CMAKE_MATCH_1})
set(project_VERSION_MINOR ${CMAKE_MATCH_2})
set(project_VERSION_PATCH ${CMAKE_MATCH_3})
set(project_VERSION "${project_VERSION_MAJOR}.${project_VERSION_MINOR}.${project_VERSION_PATCH}")

project("{{ project_root_path | basename }}"
    VERSION ${project_VERSION}
    {% if cmake_minimum_version is version('3.9', '>=') and project['description']['short'] is defined -%}DESCRIPTION "{{ project['description']['short'] }}"
    {% endif -%}
    {% if cmake_minimum_version is version('3.7', '>=') -%}LANGUAGES {{ build['languages'] | map('regex_replace', '^(.*)$', '"\\1"') | list | join(' ') }}
    {%- endif %}
)

string(TOUPPER ${PROJECT_NAME} PROJECT_NAME_UPPERCASE)

# set default build type
if(NOT CMAKE_BUILD_TYPE)       # AND NOT CMAKE_CONFIGURATION_TYPES
    message(STATUS "Setting build type to 'RelWithDebInfo' as none was specified.")
    set(CMAKE_BUILD_TYPE "RelWithDebInfo" CACHE STRING "Choose the build type." FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo")     # for gui
endif()


# explicit project-wide settings
set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/modules
                      ${CMAKE_MODULE_PATH})

set(project_BINARY_DIR ${CMAKE_BINARY_DIR}/{% if build['preferences']['use_build_type_subdir'] %}${CMAKE_BUILD_TYPE}{% endif %})
set(external_project_SOURCE_DIR ${PROJECT_SOURCE_DIR}/external)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${project_BINARY_DIR}/arch)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${project_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${project_BINARY_DIR}/bin)
{% for key, value in (build['settings'] | default({})).items() %}
set({{ key }} {{ value }})
{% endfor %}


# Require out-of-source builds
file(TO_CMAKE_PATH "${PROJECT_BINARY_DIR}/CMakeLists.txt" LOC_PATH)
if(EXISTS "${LOC_PATH}")
    message(FATAL_ERROR "You cannot build in a source directory (or containing CMakeLists.txt file). Please make a build subdirectory. Feel free to remove CMakeCache.txt and CMakeFiles.")
endif()

# scm
include(LoadSourceControl)

option(${PROJECT_NAME_UPPERCASE}_USE_CODE_QUALITY_TOOLS "Allow execution and targets for code quality" ON)

{% if format is defined -%}
# format
set(CLANG_FORMAT_EXCLUDE_PATTERNS "docs/" ${project_BINARY_DIR})
find_package(ClangFormat)
{% endif %}

# utilities
find_package(Ccache)
find_package(ClangTidy)
find_package(CppCheck)
{% if tests | length > 0 %}include(sanitizers){% endif %}

{% if tests | length > 0 -%}
# TESTING
enable_testing()

{% for i in tests if i in frameworks %}
include({{ i }})
{% endfor %}
{% endif %}


# BUILD TARGETS
{% if project['attributes']['header_only'] %}
include_directories(include)
{% else %}
add_subdirectory(src)
{% endif %}


# INSTALL
{#
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    message(STATUS "Setting default CMAKE_INSTALL_PREFIX path to ${project_BINARY_DIR}/install")
    set(CMAKE_INSTALL_PREFIX "${project_BINARY_DIR}/install" CACHE STRING "The path to use for install" FORCE)
endif()
-#}
option(${PROJECT_NAME_UPPERCASE}_INSTALL ON)
if(${PROJECT_NAME_UPPERCASE}_INSTALL)
    install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/
            DESTINATION include/${PROJECT_NAME})    # include

    install(DIRECTORY ${PROJECT_SOURCE_DIR}/etc/
            DESTINATION etc/${PROJECT_NAME})        # other
endif()


# DOCS
add_subdirectory("docs")

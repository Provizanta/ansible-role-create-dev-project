# {{ ansible_managed }}
# INFO: generated using https://github.com/Provizanta/ansible-role-create-dev-project.git

cmake_minimum_required(VERSION {{ __cmake_minimum_version }} FATAL_ERROR)

# Summarize available features
# https://cmake.org/cmake/help/v3.11/module/FeatureSummary.html
include(FeatureSummary)

# Use link optimization if available
# https://cmake.org/cmake/help/v3.11/module/CheckIPOSupported.html
include(CheckIPOSupported)
check_ipo_supported(RESULT PROPERTY)
if(ipo_supported)
    set_property(GLOBAL PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
endif()

# Common includes
include(CMakeDependentOption)

# Require out-of-source builds
file(TO_CMAKE_PATH "${PROJECT_BINARY_DIR}/CMakeLists.txt" LOC_PATH)
if(EXISTS "${LOC_PATH}")
    message(FATAL_ERROR "You cannot build in a source directory (or containing CMakeLists.txt file). Please make a build subdirectory and remove CMakeCache.txt and CMakeFiles.")
endif()


file(READ "${CMAKE_CURRENT_SOURCE_DIR}/VERSION" READ_VERSION)
string(REGEX MATCH "([0-9]*).([0-9]*).([0-9]*)" _ ${READ_VERSION})
set({{ __project_name | upper }}_VERSION_MAJOR ${CMAKE_MATCH_1})
set({{ __project_name | upper }}_VERSION_MINOR ${CMAKE_MATCH_2})
set({{ __project_name | upper }}_VERSION_PATCH ${CMAKE_MATCH_3})
set({{ __project_name | upper }}_VERSION "{{ '${%s_VERSION_MAJOR}' | format(__project_name | upper) }}.{{ '${%s_VERSION_MINOR}' | format(__project_name | upper) }}.{{ '${%s_VERSION_PATCH}' | format(__project_name | upper) }}")

project("{{ __project_name }}"
    VERSION {{ '${%s_VERSION}' | format(__project_name | upper) }}
    {% if __cmake_minimum_version is version('3.9', '>=') and project['description']['short'] is defined -%}DESCRIPTION "{{ project['description']['short'] }}"
    {% endif -%}
    {% if __cmake_minimum_version is version('3.7', '>=') -%}LANGUAGES {{ build['languages'] | map('regex_replace', '^(.*)$', '"\\1"') | list | join(' ') }}
    {%- endif %}
)

# set default build type
if(NOT CMAKE_BUILD_TYPE)       # AND NOT CMAKE_CONFIGURATION_TYPES
    message(STATUS "Setting build type to 'Release' as none was specified.")
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the build type." FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

# determine, whether project is built as a subproject or as a main project
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
    set({{ __project_name | upper }}_IS_MASTER_PROJECT ON)
    message(STATUS "Built as a master project with CMake version: ${CMAKE_VERSION}")
else()
    set({{ __project_name | upper }}_IS_MASTER_PROJECT OFF)
endif()

# project options that control generation of various targets
option({{ __project_name | upper }}_DOCS "Generate the docs target." {{ '${%s_IS_MASTER_PROJECT}' | format(__project_name | upper) }})
option({{ __project_name | upper }}_INSTALL "Generate the install target." {{ '${%s_IS_MASTER_PROJECT}' | format(__project_name | upper) }})
{% if tests | length > 0 -%}
option({{ __project_name | upper }}_TESTS "Generate the test target." {{ '${%s_IS_MASTER_PROJECT}' | format(__project_name | upper) }})
{%- endif %}

if({{ '%s_IS_MASTER_PROJECT AND CMAKE_BUILD_TYPE STREQUAL "Debug"' | format(__project_name | upper) }})
    option({{ __project_name | upper }}_USE_CODE_QUALITY_TOOLS "Allow execution and targets for code quality" ON)
    message(STATUS "Built as a master project with CMake version: ${CMAKE_VERSION}")
else()
    option({{ __project_name | upper }}_USE_CODE_QUALITY_TOOLS "Allow execution and targets for code quality" OFF)
endif()


# explicit project-wide settings
set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/modules ${CMAKE_MODULE_PATH})

set(PROJECT_NAME_UPPERCASE "{{ __project_name | upper }}")
set({{ __project_name | upper }}_BINARY_DIR ${CMAKE_BINARY_DIR}/{% if build['preferences']['use_build_type_subdir'] %}${CMAKE_BUILD_TYPE}{% endif %})
set({{ __project_name | upper }}_EXTERNAL_DEPENDENCIES_SOURCE_DIR ${PROJECT_SOURCE_DIR}/external)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY {{ '${%s_BINARY_DIR}' | format(__project_name | upper) }}/arch)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY {{ '${%s_BINARY_DIR}' | format(__project_name | upper) }}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY {{ '${%s_BINARY_DIR}' | format(__project_name | upper) }}/bin)

{% for key, value in (build['settings'] | default({})).items() -%}
set({{ key }} {{ value }})
{% endfor %}

# scm
include(LoadSourceControl)

{% if format is defined -%}
# format
set(CLANG_FORMAT_EXCLUDE_PATTERNS "docs/" {{ '${%s_BINARY_DIR}' | format(__project_name | upper) }} ${CLANG_FORMAT_EXCLUDE_PATTERNS})
find_package(ClangFormat)
{% endif %}

# utilities
find_package(Ccache)
find_package(ClangTidy)
find_package(CppCheck)

# definitions
include(AddSanitizers)
include(AddProjectWarnings)

# build
{% if project['attributes']['header_only'] -%}
add_subdirectory(include)
{%- else -%}
add_subdirectory(src)
{% endif %}

{#
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    message(STATUS "Setting default CMAKE_INSTALL_PREFIX path to {{ '${%s}_BINARY_DIR}/install' | format(__project_name | upper) }}")
    set(CMAKE_INSTALL_PREFIX "{{ '${%s}_BINARY_DIR}/install' | format(__project_name | upper) }}" CACHE STRING "The path to use for install" FORCE)
endif()
-#}

if({{ __project_name | upper }}_INSTALL)
    install(DIRECTORY ${PROJECT_SOURCE_DIR}/etc/
        DESTINATION etc/${PROJECT_NAME}         # other
    )
endif()

{% if tests | length > 0 -%}
if({{ __project_name | upper }}_TESTS)
    enable_testing()
{%   for i in tests if i in frameworks %}
    include({{ i }})
{%   endfor %}
{%- endif -%}

if({{ __project_name | upper }}_DOCS)
    add_subdirectory("docs")
endif()

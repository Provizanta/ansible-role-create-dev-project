# {{ ansible_managed }}

set(${PROJECT_NAME_UPPERCASE}_INLINE_SANITIZER "" CACHE
    STRING "Compile with a sanitizer, options are: 'address', 'memory', 'undefined', 'thread', 'leak', 'address,undefined'"
)

set(SANITIZER_OPTIONS "address" "memory" "undefined" "thread" "leak" "address,undefined")

if(${PROJECT_NAME_UPPERCASE}_INLINE_SANITIZER)
    if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        string(TOLOWER ${${PROJECT_NAME_UPPERCASE}_INLINE_SANITIZER} CURRENT_SANITIZER)

        if(CURRENT_SANITIZER IN_LIST SANITIZER_OPTIONS)
            set(${PROJECT_NAME_UPPERCASE}_SANITIZER_FLAGS "-fno-omit-frame-pointer")
            if(CMAKE_BUILD_TYPE STREQUAL "Debug")
                LIST(APPEND ${PROJECT_NAME_UPPERCASE}_SANITIZER_FLAGS "-O1")
            endif()

            LIST(APPEND ${PROJECT_NAME_UPPERCASE}_SANITIZER_FLAGS "-fsanitize=${CURRENT_SANITIZER}")
            LIST(JOIN ${PROJECT_NAME_UPPERCASE}_SANITIZER_FLAGS " " ${PROJECT_NAME_UPPERCASE}_SANITIZER_FLAGS)

            # include(CheckCXXCompilerFlag)
            # check_cxx_compiler_flag(${${PROJECT_NAME_UPPERCASE}_SANITIZER_FLAGS} CAN_USE_SUCH_SANITIZER)
            # if(CAN_USE_SUCH_SANITIZER)
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${${PROJECT_NAME_UPPERCASE}_SANITIZER_FLAGS}")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${${PROJECT_NAME_UPPERCASE}_SANITIZER_FLAGS}")

                message(STATUS "Building with '${CURRENT_SANITIZER}' sanitizer options: '${${PROJECT_NAME_UPPERCASE}_SANITIZER_FLAGS}'")
            # else()
            #     message(STATUS "Sanitizer cannot be used with this compiler")
            # endif()
        endif()
    else()
        message(FATAL_ERROR "Using sanitizers is not supported with this compiler.")
    endif()
endif()

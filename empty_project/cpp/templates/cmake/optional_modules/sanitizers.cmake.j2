# {{ ansible_managed }}

set(${PROJECT_NAME_UPPERCASE}_INLINE_SANITIZER "" CACHE
    STRING "Compile with a sanitizer, options are: Address, Memory, Undefined, Thread, Leak, 'Address,Undefined'"
)

set(SANITIZER_OPTIONS "address" "memory" "undefined" "thread" "leak" "address,undefined")

if(${PROJECT_NAME_UPPERCASE}_INLINE_SANITIZER)
    if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        string(TOLOWER ${${PROJECT_NAME_UPPERCASE}_INLINE_SANITIZER} CURRENT_SANITIZER)

        foreach(X IN LISTS SANITIZER_OPTIONS)
            if(CURRENT_SANITIZER STREQUAL X)
                set(${PROJECT_NAME_UPPERCASE}_SANITIZER_FLAGS "-fno-omit-frame-pointer")
                if(CMAKE_BUILD_TYPE STREQUAL "Debug")
                    LIST(APPEND ${PROJECT_NAME_UPPERCASE}_SANITIZER_FLAGS "-O1")
                endif()

                LIST(APPEND ${PROJECT_NAME_UPPERCASE}_SANITIZER_FLAGS "-fsanitize=${X}")
                LIST(JOIN ${PROJECT_NAME_UPPERCASE}_SANITIZER_FLAGS " " ${PROJECT_NAME_UPPERCASE}_SANITIZER_FLAGS)

                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${${PROJECT_NAME_UPPERCASE}_SANITIZER_FLAGS}")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${${PROJECT_NAME_UPPERCASE}_SANITIZER_FLAGS}")

                message(STATUS "Building with sanitizer options '${${PROJECT_NAME_UPPERCASE}_SANITIZER_FLAGS}'")
                break()
            endif()

        endforeach()
    else()
        message(FATAL_ERROR "Using sanitizers is not supported with this compiler.")
    endif()
endif()

---

- name: establish global CMakeLists.txt
  template:
    src: "cmake/CMakeLists.txt.j2"
    dest: "{{ project_root_path }}/CMakeLists.txt"

- name: establish CMake module directory
  file:
    path: "{{ project_root_path }}/{{ item }}"
    state: directory
    recurse: true
  loop:
    - cmake/modules
    - cmake/scripts

- name: handle non-header-only project source
  when: not project['attributes']['header_only']
  block:
    - name: check src/ CMakeLists.txt file presence
      stat:
        path: "{{ project_root_path }}/src/CMakeLists.txt"
      register: project_target_cmake_file

    - name: touch src/ CMakeLists.txt file presence
      when: not project_target_cmake_file.stat.exists
      file:
        path: "{{ project_root_path }}/src/CMakeLists.txt"
        state: touch

- name: establish standard CMake module files
  template:
    src: "{{ item }}"
    dest: "{{ project_root_path }}/cmake/modules/{{ (item | basename | splitext)[0] }}"
  with_fileglob:
    - "{{ role_path }}/templates/cmake/modules/*.j2"

- name: establish optional CMake module files
  when: item['use'] | default(true)
  template:
    src: "cmake/optional_modules/{{ item['file'] }}"
    dest: "{{ project_root_path }}/cmake/modules/{{ (item['file'] | basename | splitext)[0] }}"
  loop:
    - file: "clang-format.cmake.j2"
      use: "{{ format is defined }}"
    - file: "FindClangFormat.cmake.j2"
      use: "{{ format is defined }}"
    - file: "sanitizers.cmake.j2"
      use: "{{ (tests | length) > 0 }}"

- name: establish CMake script files
  when: item['use'] | default(true)
  template:
    src: "{{ role_path }}/templates/cmake/optional_scripts/{{ item['file'] }}"
    dest: "{{ project_root_path }}/cmake/scripts/{{ item['file'] | basename }}"
  loop:
    - file: "clang-format-check-changed.py"
      use: "{{ format is defined }}"

- name: establish test CMake module files
  template:
    src: "cmake/test/{{ item | lower }}.cmake.j2"
    dest: "{{ project_root_path }}/cmake/modules/{{ item | lower }}.cmake"
  loop: "{{ tests }}"

- name: establish docs CMakeLists.txt
  template:
    src: "cmake/docs_CMakeLists.txt.j2"
    dest: "{{ project_root_path }}/docs/CMakeLists.txt"

- name: check version file presence
  stat:
    path: "{{ project_root_path }}/VERSION"
  register: version_file

- name: create a version file
  when: not version_file.stat.exists
  lineinfile:
    line: "{{ project['version'] }}"
    dest: "{{ project_root_path }}/VERSION"
    create: true

- name: establish version file
  copy:
    content: |
      #ifndef __VERSION_H__
      #define __VERSION_H__

      // version variable that will be substituted by cmake
      const char* version = "${${PROJECT_NAME_UPPERCASE}_VERSION}";

      #endif	// __VERSION_H__
    dest: "{{ project_root_path }}/version.h.in"
